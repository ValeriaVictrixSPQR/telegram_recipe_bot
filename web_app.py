#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import random
from flask import Flask, render_template_string, request, jsonify
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã –¥–µ—Ç—Å–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        .recipe-card {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .recipe-title {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 15px;
            color: #fff;
        }
        .recipe-section {
            margin: 10px 0;
        }
        .recipe-section strong {
            color: #ffd700;
        }
        .btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: transform 0.3s ease;
            display: block;
            margin: 20px auto;
            text-decoration: none;
            text-align: center;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        .stats {
            text-align: center;
            margin: 20px 0;
            font-size: 1.1em;
            color: #ffd700;
        }
        .loading {
            text-align: center;
            font-size: 1.2em;
            margin: 20px 0;
        }
        .error {
            background: rgba(255, 0, 0, 0.2);
            border: 1px solid rgba(255, 0, 0, 0.5);
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã –¥–µ—Ç—Å–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è</h1>
        
        <div class="stats">
            üìö –í—Å–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: <span id="total-recipes">0</span>
        </div>
        
        <button class="btn" onclick="getRandomRecipes()">üé≤ –ü–æ–ª—É—á–∏—Ç—å 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞</button>
        
        <div id="recipes-container">
            <div class="loading">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã!</div>
        </div>
    </div>

    <script>
        let usedRecipes = new Set();
        
        async function getRandomRecipes() {
            const container = document.getElementById('recipes-container');
            container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã...</div>';
            
            try {
                const response = await fetch('/api/random-recipes');
                const data = await response.json();
                
                if (data.success) {
                    displayRecipes(data.recipes);
                    updateStats();
                } else {
                    container.innerHTML = `<div class="error">‚ùå ${data.message}</div>`;
                }
            } catch (error) {
                container.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</div>`;
            }
        }
        
        function displayRecipes(recipes) {
            const container = document.getElementById('recipes-container');
            let html = '';
            
            recipes.forEach((recipe, index) => {
                html += `
                    <div class="recipe-card">
                        <div class="recipe-title">${index + 1}. ${recipe.name}</div>
                        <div class="recipe-section">
                            <strong>ü•ò –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</strong> ${recipe.ingredients}
                        </div>
                        <div class="recipe-section">
                            <strong>üìù –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</strong> ${recipe.instructions}
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        function updateStats() {
            const totalElement = document.getElementById('total-recipes');
            fetch('/api/stats')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        totalElement.textContent = data.total_recipes;
                    }
                });
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        updateStats();
    </script>
</body>
</html>
"""

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
            if 'recipes' in data and isinstance(data['recipes'], list):
                return data
            else:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ recipes.json")
                return {"recipes": []}
    except FileNotFoundError:
        print("–§–∞–π–ª recipes.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.")
        return {"recipes": []}
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        return {"recipes": []}
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        return {"recipes": []}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
RECIPES = load_recipes()
USED_RECIPE_IDS = set()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/health')
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({"status": "healthy", "message": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"})

@app.route('/api/stats')
def stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return jsonify({
        "success": True,
        "total_recipes": len(RECIPES["recipes"])
    })

@app.route('/api/random-recipes')
def random_recipes():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    if not RECIPES["recipes"]:
        return jsonify({
            "success": False,
            "message": "–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª recipes.json"
        })
    
    available_recipes = [r for r in RECIPES["recipes"] if r["id"] not in USED_RECIPE_IDS]
    
    if len(available_recipes) < 3:
        USED_RECIPE_IDS.clear()
        available_recipes = RECIPES["recipes"]
    
    if len(available_recipes) < 3:
        return jsonify({
            "success": False,
            "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ä–µ—Ü–µ–ø—Ç–∞."
        })
    
    selected_recipes = random.sample(available_recipes, 3)
    
    for recipe in selected_recipes:
        USED_RECIPE_IDS.add(recipe["id"])
    
    return jsonify({
        "success": True,
        "recipes": selected_recipes
    })

@app.route('/api/recipes')
def all_recipes():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    return jsonify({
        "success": True,
        "recipes": RECIPES["recipes"]
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(RECIPES['recipes'])} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    print(f"–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
