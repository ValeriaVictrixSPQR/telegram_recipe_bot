import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ data —Å–ø–∏—Å–∫–æ–º (–ø—Ä—è–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞) –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º —Å –∫–ª—é—á–æ–º 'recipes'
            if isinstance(data, list):
                return {"recipes": data}
            elif 'recipes' in data and isinstance(data['recipes'], list):
                return data
            else:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ recipes.json")
                return {"recipes": []}
    except FileNotFoundError:
        print("–§–∞–π–ª recipes.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.")
        return {"recipes": []}
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        return {"recipes": []}
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        return {"recipes": []}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
RECIPES = load_recipes()
USED_RECIPE_IDS = set()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
USER_DATA = {}

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in USER_DATA:
        USER_DATA[user_id] = {
            'favorites': [],
            'preferences': {
                'age': None,
                'allergies': [],
                'cooking_time': None,
                'difficulty': None
            }
        }
    return USER_DATA[user_id]

def save_user_data(user_id, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    USER_DATA[user_id] = data

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="show_recipes")],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –¥–ª—è –¥–µ—Ç–µ–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    prefs = user_data['preferences']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings_text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
    
    # –í–æ–∑—Ä–∞—Å—Ç
    age_text = f"–í–æ–∑—Ä–∞—Å—Ç: {prefs['age']} –ª–µ—Ç" if prefs['age'] else "–í–æ–∑—Ä–∞—Å—Ç: –Ω–µ —É–∫–∞–∑–∞–Ω"
    settings_text += f"üë∂ {age_text}\n"
    
    # –ê–ª–ª–µ—Ä–≥–∏–∏
    allergies_text = ", ".join(prefs['allergies']) if prefs['allergies'] else "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    settings_text += f"‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏: {allergies_text}\n"
    
    # –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏
    time_text = prefs['cooking_time'] if prefs['cooking_time'] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    settings_text += f"‚è∞ –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {time_text}\n"
    
    # –°–ª–æ–∂–Ω–æ—Å—Ç—å
    difficulty_text = prefs['difficulty'] if prefs['difficulty'] else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    settings_text += f"üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_text}\n"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = [
        [InlineKeyboardButton("üë∂ –£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="set_age")],
        [InlineKeyboardButton("‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏", callback_data="set_allergies")],
        [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏", callback_data="set_cooking_time")],
        [InlineKeyboardButton("üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data="set_difficulty")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=settings_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def show_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    favorites = user_data['favorites']
    
    print(f"DEBUG: –ü–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"DEBUG: –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã: {favorites}")
    
    if not favorites:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b>\n\n"
                 "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n"
                 "–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
    recipe_id = favorites[0]
    recipe = next((r for r in RECIPES["recipes"] if r["number"] == recipe_id), None)
    
    if not recipe:
        # –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorites.remove(recipe_id)
        save_user_data(user_id, user_data)
        await show_favorites(update, context)
        return
    
    message = format_recipe_message(recipe, 1, len(favorites), user_id)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É
    keyboard = []
    if len(favorites) > 1:
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"fav_prev_0"),
            InlineKeyboardButton(f"1/{len(favorites)}", callback_data="fav_info"),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"fav_next_0")
        ])
    
    keyboard.extend([
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_fav_{recipe_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def show_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã
    if not RECIPES["recipes"]:
        await query.edit_message_text(
            text="‚ùå –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª recipes.json",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞
    available_recipes = [r for r in RECIPES["recipes"] if r["number"] not in USED_RECIPE_IDS]
    
    # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if len(available_recipes) < 3:
        USED_RECIPE_IDS.clear()
        available_recipes = RECIPES["recipes"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    if len(available_recipes) < 3:
        await query.edit_message_text(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ä–µ—Ü–µ–ø—Ç–∞.",
            parse_mode='HTML'
        )
        return
    
    selected_recipes = random.sample(available_recipes, 3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
    for recipe in selected_recipes:
        USED_RECIPE_IDS.add(recipe["number"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
    recipe = selected_recipes[0]
    message = format_recipe_message(recipe, 1, 3, user_id)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="prev_0"),
            InlineKeyboardButton(f"1/3", callback_data="info"),
            InlineKeyboardButton("‚û°Ô∏è", callback_data="next_0")
        ],
        [InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav_{recipe['number']}")],
        [InlineKeyboardButton("üé≤ –î—Ä—É–≥–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="show_recipes")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_recipes'] = selected_recipes
    
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )



def format_recipe_message(recipe, current_index, total_count, user_id=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º"""
    message = f"üìñ <b>{recipe['name']}</b>\n\n"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ingredients = recipe.get('ingredients', [])
    if isinstance(ingredients, str):
        ingredients_text = ingredients
    elif isinstance(ingredients, list):
        ingredients_text = ', '.join(ingredients)
    else:
        ingredients_text = str(ingredients)
    
    message += f"ü•ò <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> {ingredients_text}\n"
    message += f"üìù <b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</b> {recipe.get('method', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    

    
    return message

async def add_to_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ callback_data
    recipe_id = int(query.data.split('_')[-1])
    
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç {recipe_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"DEBUG: –¢–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ: {user_data['favorites']}")
    
    if recipe_id not in user_data['favorites']:
        user_data['favorites'].append(recipe_id)
        save_user_data(user_id, user_data)
        print(f"DEBUG: –†–µ—Ü–µ–ø—Ç {recipe_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: {user_data['favorites']}")
        await query.answer("‚úÖ –†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    else:
        print(f"DEBUG: –†–µ—Ü–µ–ø—Ç {recipe_id} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        await query.answer("‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")

async def remove_from_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    query = update.callback_query
    await query.answer()
    
    recipe_id = int(query.data.split('_')[-1])
    
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if recipe_id in user_data['favorites']:
        user_data['favorites'].remove(recipe_id)
        save_user_data(user_id, user_data)
        await query.answer("üóëÔ∏è –†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        await show_favorites(update, context)
    else:
        await query.answer("‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")



async def navigate_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    current_recipes = context.user_data.get('current_recipes', [])
    
    if not current_recipes:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    parts = query.data.split('_')
    direction = parts[0]  # 'prev' –∏–ª–∏ 'next'
    current_index = int(parts[1])
    
    if direction == "prev":
        new_index = (current_index - 1) % len(current_recipes)
    else:  # next
        new_index = (current_index + 1) % len(current_recipes)
    
    recipe = current_recipes[new_index]
    message = format_recipe_message(recipe, new_index + 1, len(current_recipes), user_id)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_{new_index}"),
            InlineKeyboardButton(f"{new_index + 1}/{len(current_recipes)}", callback_data="info"),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_{new_index}")
        ],
        [InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav_{recipe['number']}")],
        [InlineKeyboardButton("üé≤ –î—Ä—É–≥–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="show_recipes")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def navigate_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    favorites = user_data['favorites']
    
    if not favorites:
        await query.answer("‚ùå –ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    parts = query.data.split('_')
    direction = parts[1]  # 'prev' –∏–ª–∏ 'next'
    current_index = int(parts[2])
    
    if direction == "prev":
        new_index = (current_index - 1) % len(favorites)
    else:  # next
        new_index = (current_index + 1) % len(favorites)
    
    recipe_id = favorites[new_index]
    recipe = next((r for r in RECIPES["recipes"] if r["number"] == recipe_id), None)
    
    if not recipe:
        # –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorites.remove(recipe_id)
        save_user_data(user_id, user_data)
        await query.answer("üóëÔ∏è –†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        await show_favorites(update, context)
        return
    
    message = format_recipe_message(recipe, new_index + 1, len(favorites), user_id)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É
    keyboard = []
    if len(favorites) > 1:
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"fav_prev_{new_index}"),
            InlineKeyboardButton(f"{new_index + 1}/{len(favorites)}", callback_data="fav_info"),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"fav_next_{new_index}")
        ])
    
    keyboard.extend([
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_fav_{recipe_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="show_recipes")],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['user_id'] = query.from_user.id
    
    if query.data == "main_menu":
        await main_menu(update, context)
    elif query.data == "show_recipes":
        await show_recipes(update, context)
    elif query.data == "show_favorites":
        await show_favorites(update, context)
    elif query.data == "show_settings":
        await show_settings(update, context)
    elif query.data.startswith("add_fav_"):
        await add_to_favorites(update, context)
    elif query.data.startswith("remove_fav_"):
        await remove_from_favorites(update, context)

    elif query.data.startswith("prev_") or query.data.startswith("next_"):
        await navigate_recipes(update, context)
    elif query.data.startswith("fav_prev_") or query.data.startswith("fav_next_"):
        await navigate_favorites(update, context)
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not token:
        token = "8424689402:AAEWrilYr8sz1JVM6zSvaY3akg0nG029RcM"
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–¥–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)")
    
    if not token:
        print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ TELEGRAM_BOT_TOKEN")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –≤ Railway")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã
    if not RECIPES["recipes"]:
        print("–û—à–∏–±–∫–∞: –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª recipes.json")
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(RECIPES['recipes'])} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except AttributeError:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
        application.run_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise e

if __name__ == '__main__':
    main()
