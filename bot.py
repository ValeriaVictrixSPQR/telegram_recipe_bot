import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if 'recipes' in data and isinstance(data['recipes'], list):
                return data
            else:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ recipes.json")
                return {"recipes": []}
    except FileNotFoundError:
        print("–§–∞–π–ª recipes.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.")
        return {"recipes": []}
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        return {"recipes": []}
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        return {"recipes": []}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
RECIPES = load_recipes()
USED_RECIPE_IDS = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç—ã", callback_data="show_recipes")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ—Ü–µ–ø—Ç—ã' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞!",
        reply_markup=reply_markup
    )

async def show_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã
    if not RECIPES["recipes"]:
        await query.edit_message_text(
            text="‚ùå –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª recipes.json",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞
    available_recipes = [r for r in RECIPES["recipes"] if r["id"] not in USED_RECIPE_IDS]
    
    # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if len(available_recipes) < 3:
        USED_RECIPE_IDS.clear()
        available_recipes = RECIPES["recipes"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    if len(available_recipes) < 3:
        await query.edit_message_text(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ä–µ—Ü–µ–ø—Ç–∞.",
            parse_mode='HTML'
        )
        return
    
    selected_recipes = random.sample(available_recipes, 3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
    for recipe in selected_recipes:
        USED_RECIPE_IDS.add(recipe["id"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    message = "üçΩÔ∏è –í–æ—Ç —Ç—Ä–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –≤–∞—Å:\n\n"
    
    for i, recipe in enumerate(selected_recipes, 1):
        message += f"üìñ <b>{i}. {recipe['name']}</b>\n"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º)
        ingredients = recipe.get('ingredients', [])
        if isinstance(ingredients, str):
            ingredients_text = ingredients
        elif isinstance(ingredients, list):
            ingredients_text = ', '.join(ingredients)
        else:
            ingredients_text = str(ingredients)
        
        message += f"ü•ò <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> {ingredients_text}\n"
        message += f"üìù <b>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:</b> {recipe.get('instructions', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    keyboard = [
        [InlineKeyboardButton("–î–∞–≤–∞–π –¥—Ä—É–≥–æ–µ", callback_data="show_recipes")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    
    if query.data == "show_recipes":
        await show_recipes(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_BOT_TOKEN")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã
    if not RECIPES["recipes"]:
        print("–û—à–∏–±–∫–∞: –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª recipes.json")
        return
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(RECIPES['recipes'])} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except AttributeError:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
        application.run_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
