#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import re

def extract_cooking_time(recipe):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –∏–∑ —Ä–µ—Ü–µ–ø—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)"""
    method = recipe.get('method', '').lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    patterns = [
        r'(\d+)\s*–º–∏–Ω—É—Ç',  # "25 –º–∏–Ω—É—Ç"
        r'(\d+)\s*–º–∏–Ω',    # "25 –º–∏–Ω"
        r'(\d+)\s*–º',      # "25 –º"
        r'(\d+)\s*–º–∏–Ω—É—Ç—ã', # "25 –º–∏–Ω—É—Ç—ã"
        r'(\d+)\s*–º–∏–Ω—É—Ç—É', # "25 –º–∏–Ω—É—Ç—É"
        r'(\d+)\s*–º–∏–Ω—É—Ç\b', # "25 –º–∏–Ω—É—Ç" (—Å –≥—Ä–∞–Ω–∏—Ü–µ–π —Å–ª–æ–≤–∞)
        r'(\d+)\s*–º–∏–Ω\b',   # "25 –º–∏–Ω" (—Å –≥—Ä–∞–Ω–∏—Ü–µ–π —Å–ª–æ–≤–∞)
    ]
    
    max_time = 0
    found_times = []
    
    for pattern in patterns:
        matches = re.findall(pattern, method)
        for match in matches:
            time_value = int(match)
            found_times.append(time_value)
            if time_value > max_time:
                max_time = time_value
    
    return max_time, found_times

def analyze_and_update_recipes():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ cooking_time"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
    with open('recipes.json', 'r', encoding='utf-8') as f:
        recipes = json.load(f)
    
    print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(recipes)} —Ä–µ—Ü–µ–ø—Ç–æ–≤...")
    print("=" * 60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_recipes = len(recipes)
    recipes_with_time = 0
    recipes_without_time = 0
    time_distribution = {}
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç
    for i, recipe in enumerate(recipes):
        cooking_time, found_times = extract_cooking_time(recipe)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ cooking_time
        recipe['cooking_time'] = cooking_time
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if cooking_time > 0:
            recipes_with_time += 1
            if cooking_time not in time_distribution:
                time_distribution[cooking_time] = 0
            time_distribution[cooking_time] += 1
        else:
            recipes_without_time += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        if (i + 1) % 20 == 0:
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{total_recipes}")
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 60)
    
    print(f"–í—Å–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {total_recipes}")
    print(f"–° —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏: {recipes_with_time}")
    print(f"–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {recipes_without_time}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º: {(recipes_with_time/total_recipes)*100:.1f}%")
    
    print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏:")
    print("-" * 40)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    sorted_times = sorted(time_distribution.items())
    for time, count in sorted_times:
        print(f"{time:3d} –º–∏–Ω—É—Ç: {count:3d} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    if recipes_without_time > 0:
        print(f"\n–†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ ({recipes_without_time}):")
        print("-" * 40)
        
        no_time_recipes = []
        for recipe in recipes:
            if recipe['cooking_time'] == 0:
                no_time_recipes.append(recipe['name'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        for i, name in enumerate(no_time_recipes[:10]):
            print(f"{i+1:2d}. {name}")
        
        if len(no_time_recipes) > 10:
            print(f"... –∏ –µ—â–µ {len(no_time_recipes) - 10} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    print(f"\n–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã...")
    with open('recipes.json', 'w', encoding='utf-8') as f:
        json.dump(recipes, f, ensure_ascii=False, indent=4)
    
    print("‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª recipes.json –æ–±–Ω–æ–≤–ª–µ–Ω.")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_filename = f'recipes_backup_{len(recipes)}_recipes.json'
    with open(backup_filename, 'w', encoding='utf-8') as f:
        json.dump(recipes, f, ensure_ascii=False, indent=4)
    
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_filename}")

if __name__ == "__main__":
    analyze_and_update_recipes()
